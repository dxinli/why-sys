// Code generated by ent, DO NOT EDIT.

package role

import (
	"why-sys/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldID, id))
}

// RoleName applies equality check predicate on the "role_name" field. It's identical to RoleNameEQ.
func RoleName(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldRoleName, v))
}

// RoleDesc applies equality check predicate on the "role_desc" field. It's identical to RoleDescEQ.
func RoleDesc(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldRoleDesc, v))
}

// RoleNameEQ applies the EQ predicate on the "role_name" field.
func RoleNameEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldRoleName, v))
}

// RoleNameNEQ applies the NEQ predicate on the "role_name" field.
func RoleNameNEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldRoleName, v))
}

// RoleNameIn applies the In predicate on the "role_name" field.
func RoleNameIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldRoleName, vs...))
}

// RoleNameNotIn applies the NotIn predicate on the "role_name" field.
func RoleNameNotIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldRoleName, vs...))
}

// RoleNameGT applies the GT predicate on the "role_name" field.
func RoleNameGT(v string) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldRoleName, v))
}

// RoleNameGTE applies the GTE predicate on the "role_name" field.
func RoleNameGTE(v string) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldRoleName, v))
}

// RoleNameLT applies the LT predicate on the "role_name" field.
func RoleNameLT(v string) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldRoleName, v))
}

// RoleNameLTE applies the LTE predicate on the "role_name" field.
func RoleNameLTE(v string) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldRoleName, v))
}

// RoleNameContains applies the Contains predicate on the "role_name" field.
func RoleNameContains(v string) predicate.Role {
	return predicate.Role(sql.FieldContains(FieldRoleName, v))
}

// RoleNameHasPrefix applies the HasPrefix predicate on the "role_name" field.
func RoleNameHasPrefix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasPrefix(FieldRoleName, v))
}

// RoleNameHasSuffix applies the HasSuffix predicate on the "role_name" field.
func RoleNameHasSuffix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasSuffix(FieldRoleName, v))
}

// RoleNameEqualFold applies the EqualFold predicate on the "role_name" field.
func RoleNameEqualFold(v string) predicate.Role {
	return predicate.Role(sql.FieldEqualFold(FieldRoleName, v))
}

// RoleNameContainsFold applies the ContainsFold predicate on the "role_name" field.
func RoleNameContainsFold(v string) predicate.Role {
	return predicate.Role(sql.FieldContainsFold(FieldRoleName, v))
}

// RoleDescEQ applies the EQ predicate on the "role_desc" field.
func RoleDescEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldEQ(FieldRoleDesc, v))
}

// RoleDescNEQ applies the NEQ predicate on the "role_desc" field.
func RoleDescNEQ(v string) predicate.Role {
	return predicate.Role(sql.FieldNEQ(FieldRoleDesc, v))
}

// RoleDescIn applies the In predicate on the "role_desc" field.
func RoleDescIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldIn(FieldRoleDesc, vs...))
}

// RoleDescNotIn applies the NotIn predicate on the "role_desc" field.
func RoleDescNotIn(vs ...string) predicate.Role {
	return predicate.Role(sql.FieldNotIn(FieldRoleDesc, vs...))
}

// RoleDescGT applies the GT predicate on the "role_desc" field.
func RoleDescGT(v string) predicate.Role {
	return predicate.Role(sql.FieldGT(FieldRoleDesc, v))
}

// RoleDescGTE applies the GTE predicate on the "role_desc" field.
func RoleDescGTE(v string) predicate.Role {
	return predicate.Role(sql.FieldGTE(FieldRoleDesc, v))
}

// RoleDescLT applies the LT predicate on the "role_desc" field.
func RoleDescLT(v string) predicate.Role {
	return predicate.Role(sql.FieldLT(FieldRoleDesc, v))
}

// RoleDescLTE applies the LTE predicate on the "role_desc" field.
func RoleDescLTE(v string) predicate.Role {
	return predicate.Role(sql.FieldLTE(FieldRoleDesc, v))
}

// RoleDescContains applies the Contains predicate on the "role_desc" field.
func RoleDescContains(v string) predicate.Role {
	return predicate.Role(sql.FieldContains(FieldRoleDesc, v))
}

// RoleDescHasPrefix applies the HasPrefix predicate on the "role_desc" field.
func RoleDescHasPrefix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasPrefix(FieldRoleDesc, v))
}

// RoleDescHasSuffix applies the HasSuffix predicate on the "role_desc" field.
func RoleDescHasSuffix(v string) predicate.Role {
	return predicate.Role(sql.FieldHasSuffix(FieldRoleDesc, v))
}

// RoleDescIsNil applies the IsNil predicate on the "role_desc" field.
func RoleDescIsNil() predicate.Role {
	return predicate.Role(sql.FieldIsNull(FieldRoleDesc))
}

// RoleDescNotNil applies the NotNil predicate on the "role_desc" field.
func RoleDescNotNil() predicate.Role {
	return predicate.Role(sql.FieldNotNull(FieldRoleDesc))
}

// RoleDescEqualFold applies the EqualFold predicate on the "role_desc" field.
func RoleDescEqualFold(v string) predicate.Role {
	return predicate.Role(sql.FieldEqualFold(FieldRoleDesc, v))
}

// RoleDescContainsFold applies the ContainsFold predicate on the "role_desc" field.
func RoleDescContainsFold(v string) predicate.Role {
	return predicate.Role(sql.FieldContainsFold(FieldRoleDesc, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Role) predicate.Role {
	return predicate.Role(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Role) predicate.Role {
	return predicate.Role(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Role) predicate.Role {
	return predicate.Role(sql.NotPredicates(p))
}
