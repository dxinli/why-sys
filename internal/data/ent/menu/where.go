// Code generated by ent, DO NOT EDIT.

package menu

import (
	"why-sys/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldID, id))
}

// MenuName applies equality check predicate on the "menu_name" field. It's identical to MenuNameEQ.
func MenuName(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldMenuName, v))
}

// Leaf applies equality check predicate on the "leaf" field. It's identical to LeafEQ.
func Leaf(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldLeaf, v))
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldPath, v))
}

// Component applies equality check predicate on the "component" field. It's identical to ComponentEQ.
func Component(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldComponent, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v int) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldParentID, v))
}

// MenuDesc applies equality check predicate on the "menu_desc" field. It's identical to MenuDescEQ.
func MenuDesc(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldMenuDesc, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v float64) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldSort, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v uint16) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldLevel, v))
}

// MenuNameEQ applies the EQ predicate on the "menu_name" field.
func MenuNameEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldMenuName, v))
}

// MenuNameNEQ applies the NEQ predicate on the "menu_name" field.
func MenuNameNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldMenuName, v))
}

// MenuNameIn applies the In predicate on the "menu_name" field.
func MenuNameIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldMenuName, vs...))
}

// MenuNameNotIn applies the NotIn predicate on the "menu_name" field.
func MenuNameNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldMenuName, vs...))
}

// MenuNameGT applies the GT predicate on the "menu_name" field.
func MenuNameGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldMenuName, v))
}

// MenuNameGTE applies the GTE predicate on the "menu_name" field.
func MenuNameGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldMenuName, v))
}

// MenuNameLT applies the LT predicate on the "menu_name" field.
func MenuNameLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldMenuName, v))
}

// MenuNameLTE applies the LTE predicate on the "menu_name" field.
func MenuNameLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldMenuName, v))
}

// MenuNameContains applies the Contains predicate on the "menu_name" field.
func MenuNameContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldMenuName, v))
}

// MenuNameHasPrefix applies the HasPrefix predicate on the "menu_name" field.
func MenuNameHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldMenuName, v))
}

// MenuNameHasSuffix applies the HasSuffix predicate on the "menu_name" field.
func MenuNameHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldMenuName, v))
}

// MenuNameEqualFold applies the EqualFold predicate on the "menu_name" field.
func MenuNameEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldMenuName, v))
}

// MenuNameContainsFold applies the ContainsFold predicate on the "menu_name" field.
func MenuNameContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldMenuName, v))
}

// LeafEQ applies the EQ predicate on the "leaf" field.
func LeafEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldLeaf, v))
}

// LeafNEQ applies the NEQ predicate on the "leaf" field.
func LeafNEQ(v bool) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldLeaf, v))
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldPath, v))
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldPath, v))
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldPath, vs...))
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldPath, vs...))
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldPath, v))
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldPath, v))
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldPath, v))
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldPath, v))
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldPath, v))
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldPath, v))
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldPath, v))
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldPath, v))
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldPath, v))
}

// ComponentEQ applies the EQ predicate on the "component" field.
func ComponentEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldComponent, v))
}

// ComponentNEQ applies the NEQ predicate on the "component" field.
func ComponentNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldComponent, v))
}

// ComponentIn applies the In predicate on the "component" field.
func ComponentIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldComponent, vs...))
}

// ComponentNotIn applies the NotIn predicate on the "component" field.
func ComponentNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldComponent, vs...))
}

// ComponentGT applies the GT predicate on the "component" field.
func ComponentGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldComponent, v))
}

// ComponentGTE applies the GTE predicate on the "component" field.
func ComponentGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldComponent, v))
}

// ComponentLT applies the LT predicate on the "component" field.
func ComponentLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldComponent, v))
}

// ComponentLTE applies the LTE predicate on the "component" field.
func ComponentLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldComponent, v))
}

// ComponentContains applies the Contains predicate on the "component" field.
func ComponentContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldComponent, v))
}

// ComponentHasPrefix applies the HasPrefix predicate on the "component" field.
func ComponentHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldComponent, v))
}

// ComponentHasSuffix applies the HasSuffix predicate on the "component" field.
func ComponentHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldComponent, v))
}

// ComponentEqualFold applies the EqualFold predicate on the "component" field.
func ComponentEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldComponent, v))
}

// ComponentContainsFold applies the ContainsFold predicate on the "component" field.
func ComponentContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldComponent, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v int) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v int) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...int) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...int) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldParentID))
}

// MenuDescEQ applies the EQ predicate on the "menu_desc" field.
func MenuDescEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldMenuDesc, v))
}

// MenuDescNEQ applies the NEQ predicate on the "menu_desc" field.
func MenuDescNEQ(v string) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldMenuDesc, v))
}

// MenuDescIn applies the In predicate on the "menu_desc" field.
func MenuDescIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldMenuDesc, vs...))
}

// MenuDescNotIn applies the NotIn predicate on the "menu_desc" field.
func MenuDescNotIn(vs ...string) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldMenuDesc, vs...))
}

// MenuDescGT applies the GT predicate on the "menu_desc" field.
func MenuDescGT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldMenuDesc, v))
}

// MenuDescGTE applies the GTE predicate on the "menu_desc" field.
func MenuDescGTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldMenuDesc, v))
}

// MenuDescLT applies the LT predicate on the "menu_desc" field.
func MenuDescLT(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldMenuDesc, v))
}

// MenuDescLTE applies the LTE predicate on the "menu_desc" field.
func MenuDescLTE(v string) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldMenuDesc, v))
}

// MenuDescContains applies the Contains predicate on the "menu_desc" field.
func MenuDescContains(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContains(FieldMenuDesc, v))
}

// MenuDescHasPrefix applies the HasPrefix predicate on the "menu_desc" field.
func MenuDescHasPrefix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasPrefix(FieldMenuDesc, v))
}

// MenuDescHasSuffix applies the HasSuffix predicate on the "menu_desc" field.
func MenuDescHasSuffix(v string) predicate.Menu {
	return predicate.Menu(sql.FieldHasSuffix(FieldMenuDesc, v))
}

// MenuDescIsNil applies the IsNil predicate on the "menu_desc" field.
func MenuDescIsNil() predicate.Menu {
	return predicate.Menu(sql.FieldIsNull(FieldMenuDesc))
}

// MenuDescNotNil applies the NotNil predicate on the "menu_desc" field.
func MenuDescNotNil() predicate.Menu {
	return predicate.Menu(sql.FieldNotNull(FieldMenuDesc))
}

// MenuDescEqualFold applies the EqualFold predicate on the "menu_desc" field.
func MenuDescEqualFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldEqualFold(FieldMenuDesc, v))
}

// MenuDescContainsFold applies the ContainsFold predicate on the "menu_desc" field.
func MenuDescContainsFold(v string) predicate.Menu {
	return predicate.Menu(sql.FieldContainsFold(FieldMenuDesc, v))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v float64) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v float64) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...float64) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...float64) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v float64) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v float64) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v float64) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v float64) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldSort, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v uint16) predicate.Menu {
	return predicate.Menu(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v uint16) predicate.Menu {
	return predicate.Menu(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...uint16) predicate.Menu {
	return predicate.Menu(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...uint16) predicate.Menu {
	return predicate.Menu(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v uint16) predicate.Menu {
	return predicate.Menu(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v uint16) predicate.Menu {
	return predicate.Menu(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v uint16) predicate.Menu {
	return predicate.Menu(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v uint16) predicate.Menu {
	return predicate.Menu(sql.FieldLTE(FieldLevel, v))
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Menu) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Menu) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Menu) predicate.Menu {
	return predicate.Menu(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Menu) predicate.Menu {
	return predicate.Menu(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Menu) predicate.Menu {
	return predicate.Menu(sql.NotPredicates(p))
}
