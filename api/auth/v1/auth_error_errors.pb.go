// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUsernameIsEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthError_USERNAME_IS_EMPTY.String() && e.Code == 500
}

func ErrorUsernameIsEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthError_USERNAME_IS_EMPTY.String(), fmt.Sprintf(format, args...))
}

func IsPasswordIsEmpty(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthError_PASSWORD_IS_EMPTY.String() && e.Code == 500
}

func ErrorPasswordIsEmpty(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthError_PASSWORD_IS_EMPTY.String(), fmt.Sprintf(format, args...))
}

func IsUsernameOrPasswordError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthError_USERNAME_OR_PASSWORD_ERROR.String() && e.Code == 500
}

func ErrorUsernameOrPasswordError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthError_USERNAME_OR_PASSWORD_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsUserNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthError_USER_NOT_EXIST.String() && e.Code == 500
}

func ErrorUserNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthError_USER_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsUserNotValid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == AuthError_USER_NOT_VALID.String() && e.Code == 500
}

func ErrorUserNotValid(format string, args ...interface{}) *errors.Error {
	return errors.New(500, AuthError_USER_NOT_VALID.String(), fmt.Sprintf(format, args...))
}
